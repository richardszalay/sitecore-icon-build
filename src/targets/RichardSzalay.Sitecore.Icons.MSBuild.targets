<Project>

  <PropertyGroup>
    <BuildSitecoreIconArchives Condition="'$(BuildSitecoreIconArchives)' == ''">true</BuildSitecoreIconArchives>
    <CollectDefaultSitecoreSizedIconSources>$(BuildSitecoreIconArchives)</CollectDefaultSitecoreSizedIconSources>
    <DefaultSitecoreSizedIconSourcesParentDirectory>sitecore\shell\Themes\Standard</DefaultSitecoreSizedIconSourcesParentDirectory>
  </PropertyGroup>

  <PropertyGroup>
    <IntermediateSitecoreIconArchivePath>$(IntermediateOutputPath)sitecoreIcons\</IntermediateSitecoreIconArchivePath>

    <CleanDependsOn>
      $(CleanDependsOn);
      CleanIntermediateSitecoreIconArchivePath
    </CleanDependsOn>

    <BuildSitecoreIconArchivesDependsOn>
      $(BuildSitecoreIconArchivesDependsOn);
      CollectSitecoreSizedIconSourceFiles;
    </BuildSitecoreIconArchivesDependsOn>

    <PipelineCollectFilesPhaseDependsOn>
      $(PipelineCollectFilesPhaseDependsOn);
      CollectGeneratedSitecoreIconArchives;
    </PipelineCollectFilesPhaseDependsOn>

    <ExcludeFilesFromPackageDependsOn>
      $(ExcludeFilesFromPackageDependsOn);
      ExcludeSizedIconSources
    </ExcludeFilesFromPackageDependsOn>
  </PropertyGroup>

  <Target Name="CollectSitecoreSizedIconSources">
    <ItemGroup>
      <SitecoreSizedIconSources Include="$([System.IO.Directory]::GetDirectories(`$(DefaultSitecoreSizedIconSourcesParentDirectory)`))"  />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <CollectSitecoreSizedIconSourceFilesDependsOn>
      $(CollectSitecoreSizedIconSourceFilesDependsOn);
      CollectSitecoreSizedIconSources;
    </CollectSitecoreSizedIconSourceFilesDependsOn>
  </PropertyGroup>

  <Target Name="CollectSitecoreSizedIconSourceFiles" DependsOnTargets="$(CollectSitecoreSizedIconSourceFilesDependsOn)">
    <ItemGroup>
      <_SitecoreSizedIconSourceFilesSpecs Include="@(SitecoreSizedIconSources -> '%(FullPath)\**\*')"
                                          >
        <ArchiveName>%(Filename)</ArchiveName>
      </_SitecoreSizedIconSourceFilesSpecs>
    </ItemGroup>

    <CreateItem Include="@(_SitecoreSizedIconSourceFilesSpecs)">
      <Output TaskParameter="Include" ItemName="_SitecoreSizedIconSourceFiles" />
    </CreateItem>

    <ItemGroup>
      <SitecoreSizedIconSourceFiles Include="@(_SitecoreSizedIconSourceFiles)"
                                    Condition="'%(RecursiveDir)' != ''">
        <EntryPath>%(RecursiveDir)%(Filename)%(Extension)</EntryPath>
      </SitecoreSizedIconSourceFiles>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <BuildSitecoreSizedIconArchivesDependsOn Condition="'$(CollectDefaultSitecoreSizedIconSources)' == 'true'">
      $(BuildSitecoreSizedIconArchivesDependsOn);
      CollectSitecoreSizedIconSourceFiles
    </BuildSitecoreSizedIconArchivesDependsOn>    
  </PropertyGroup>

  <Target Name="CollectGeneratedSitecoreIconArchives">
    <ItemGroup>
      <_SitecoreIconArchivesForPackaging Include="$(IntermediateSitecoreIconArchivePath)*.zip" />
      <FilesForPackagingFromProject Include="@(_SitecoreIconArchivesForPackaging)">
        <DestinationRelativePath>sitecore\shell\Themes\Standard\%(Filename)%(Extension)</DestinationRelativePath>
      </FilesForPackagingFromProject>
    </ItemGroup>
  </Target>

  <Target Name="ExcludeSizedIconSources" DependsOnTargets="CollectSitecoreSizedIconSourceFiles">
    <ItemGroup>
      <ExcludeFromPackageFiles Include="@(SitecoreSizedIconSourceFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="CleanIntermediateSitecoreIconArchivePath">
    <RemoveDir Directories="$(IntermediateSitecoreIconArchivePath)" Condition="Exists($(IntermediateSitecoreIconArchivePath))" />
  </Target>

  <Target Name="BuildSitecoreIconArchives" 
          AfterTargets="Compile"
          DependsOnTargets="$(BuildSitecoreIconArchivesDependsOn)"
          Inputs="@(SitecoreSizedIconSourceFiles)"
          Outputs="$(IntermediateSitecoreIconArchivePath)%(ArchiveName).zip"
          >

    <MakeDir Directories="$(IntermediateSitecoreIconArchivePath)"
          Condition="!Exists($(IntermediateSitecoreIconArchivePath))" />

    <CreateSitecoreIconArchive
         InputFileNames="@(SitecoreSizedIconSourceFiles)"
         OutputFileName="$(IntermediateSitecoreIconArchivePath)%(ArchiveName).zip"
         OverwriteExistingFile="true" />

  </Target>

  <UsingTask TaskName="CreateSitecoreIconArchive" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFileNames ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[        
        const int BufferSize = 64 * 1024;
 
        var buffer = new byte[BufferSize];
        var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;
 
        using (var outputFileStream = new FileStream(OutputFileName, fileMode))
        {
          using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
          {
            foreach (var inputFileName in InputFileNames)
            {
              var inputFileFullPath = inputFileName.GetMetadata("FullPath");
              var inputFileEntryPath = inputFileName.GetMetadata("EntryPath");
              
              var archiveEntry = archive.CreateEntry(inputFileEntryPath);
 
              using (var fs = new FileStream(inputFileFullPath, FileMode.Open))
              {
                using (var zipStream = archiveEntry.Open())
                {
                  int bytesRead = -1;
                  while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                  {
                    zipStream.Write(buffer, 0, bytesRead);
                  }
                }
              }
            }
          }
        }        
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>